#!/bin/sh

# Thse empty variables are expected to be set at packaging time
APP_DIR=/media/cryptofs/apps/usr/palm/applications/org.webosarchive.patches.remove-ypmobile
PATCH_NAME=remove-ypmobile.patch
BSPATCH_FILE=

if [ -f "/media/cryptofs/apps/usr/bin/lsdiff" ] ; then
  LSDIFF=/media/cryptofs/apps/usr/bin/lsdiff
else
  LSDIFF=/var/usr/bin/lsdiff
fi

if [ -f "/media/cryptofs/apps/usr/bin/patch" ] ; then
  PATCH_EXEC=/media/cryptofs/apps/usr/bin/patch
else
  PATCH_EXEC=/var/usr/bin/patch
fi

if [ -f "/media/cryptofs/apps/usr/bin/file" ] ; then
  FILE_UTIL=/media/cryptofs/apps/usr/bin/file
else
  FILE_UTIL=/var/usr/bin/file
fi

if [ -f $APP_DIR/$PATCH_NAME ]
then 
  FILE_LIST=`$LSDIFF --strip=1 $APP_DIR/$PATCH_NAME`
  TWEAKS_NAME=`basename $PATCH_NAME .patch`.json
fi

if [ "$BSPATCH_FILE" != "" ]
then
  BSPATCH_NAME=remove-ypmobile.patch`basename $BSPATCH_FILE`.bspatch
fi


BSPATCH_EXEC=/usr/bin/bspatch
IPKG_INFO_DIR=/usr/lib/ipkg/info
PATCH_CONTROL_DIR=/var/usr/lib/.webosinternals.patches
PATCH_PACKAGES_LIST=/media/internal/.webosinternals.patches.packages
PATCH_LOG=/media/internal/webos-patches.log
TWEAKS_PREFERENCES_DIR=/media/cryptofs/apps/usr/palm/services/org.webosinternals.tweaks.prefs/preferences
VERSION=aupt-4

remount_rw() {
  mount -o rw,remount /
}

do_failure() {
  echo "*** FAILED ***" >> $PATCH_LOG
  exit 1
}

failed_install() {
  echo "" >> $PATCH_LOG
  echo "----------------------------------" >> $PATCH_LOG
  echo "Installation FAILED!" >> $PATCH_LOG
  echo "----------------------------------" >> $PATCH_LOG
  $PATCH_EXEC -s -p1 -d / --dry-run < ${APP_DIR}/$PATCH_NAME | tee -a $PATCH_LOG 1>&2
  echo "ls -R ${APP_DIR}" >> $PATCH_LOG
  ls -R ${APP_DIR} 2>&1 >> $PATCH_LOG
  do_failure
}

#find_incompatible() {
  #for i in `ls $PATCH_CONTROL_DIR/*.patch`
  #do
    #for j in `$LSDIFF --strip=1 $i`
    #do
      #if [ "$file" = "/$j" ]
      #then
        #echo "  Incompatible package: `basename $i .patch`" | tee -a $PATCH_LOG 1>&2
      #fi
    #done
  #done
#}

check_package_list() {
  echo "Find package for file $file" >> $PATCH_LOG
  if [ -f $APP_DIR/package_list ]
  then
    for j in `cat $APP_DIR/package_list`
    do
      md5sum_line=`grep -h $file $IPKG_INFO_DIR/$j.md5sums`
      if [ "$md5sum_line" != "" ]
      then
      echo "  FOUND in package $j" >> $PATCH_LOG
      echo "  $md5sum_line" >> $PATCH_LOG
      echo $md5sum_line >> $APP_DIR/md5sums
      palm_md5sum=`echo $md5sum_line | awk '{print $1}'`
      else
      echo "  Not in package $j" >> $PATCH_LOG
      fi
    done
  fi
}

get_palm_md5sum() {
  palm_md5sum=
  check_package_list

  if [ "$palm_md5sum" = "" ]
  then
    echo "File not found in package_list, checking all *.md5sums" >> $PATCH_LOG
    md5sum_line=`grep -h $file $IPKG_INFO_DIR/*.md5sums`
    if [ "$md5sum_line" != "" ]
    then
      echo "  FOUND" >> $PATCH_LOG
      echo "  $md5sum_line" >> $PATCH_LOG
      echo $md5sum_line >> $APP_DIR/md5sums
      palm_md5sum=`echo $md5sum_line | awk '{print $1}'`
    else
      echo "  File not found in md5sums, most likely not a stock WebOS file" >> $PATCH_LOG
    fi
  fi
}

install_patch() {
  if [ -f ${APP_DIR}/$PATCH_NAME ]
  then
    cp $APP_DIR/$PATCH_NAME $PATCH_CONTROL_DIR/$PATCH_NAME

    if [ "$patch_applied" != "yes" ]
    then
      echo "" | tee -a $PATCH_LOG
      echo "----------------------------------" | tee -a $PATCH_LOG
      echo "Actually applying the patch!" | tee -a $PATCH_LOG
      echo "----------------------------------" | tee -a $PATCH_LOG
      $PATCH_EXEC -p1 -d / --no-backup-if-mismatch < ${APP_DIR}/$PATCH_NAME 2>&1 | tee -a $PATCH_LOG || do_failure
    fi
  fi
}

install_tweaks() {
  if [ -f ${APP_DIR}/$TWEAKS_NAME ]
  then
    echo "" | tee -a $PATCH_LOG
    echo "----------------------------------" | tee -a $PATCH_LOG
    echo "Actually installing the tweaks!" | tee -a $PATCH_LOG
    echo "----------------------------------" | tee -a $PATCH_LOG
    mkdir -p $TWEAKS_PREFERENCES_DIR 2>&1 | tee -a $PATCH_LOG
    cp $APP_DIR/$TWEAKS_NAME $TWEAKS_PREFERENCES_DIR/`basename $APP_DIR`.json 2>&1 | tee -a $PATCH_LOG
  fi
}

install_additional_files() {
  if [ -d $APP_DIR/additional_files ]
  then
    for i in `find $APP_DIR/additional_files -type f`
    do
      file=${i#$APP_DIR/additional_files}
      echo "Installing file $file" | tee -a $PATCH_LOG
      mkdir -p `dirname $file`
      cp $i $file
    done
  fi
}

verify_additional_files() {
  if [ -d $APP_DIR/additional_files ]
  then
    echo "" >> $PATCH_LOG
    echo "----------------------------------" >> $PATCH_LOG
    echo "Verify file replacements..." >> $PATCH_LOG
    echo "----------------------------------" >> $PATCH_LOG
    for i in `find $APP_DIR/additional_files -type f`
    do
      file=${i#$APP_DIR/additional_files/}
      get_palm_md5sum
      if [ "$palm_md5sum" != "" ] && [ "$palm_md5sum" != "`md5sum /$file | awk '{print $1}'`" ]
      then
        echo "ERROR: File must be stock to replace" | tee -a $PATCH_LOG 1>&2
        echo "  file: /$file" | tee -a $PATCH_LOG 1>&2
        echo "  md5um: `md5sum /$file`" | tee -a $PATCH_LOG 1>&2
        echo "  palm_md5um: $palm_md5sum" | tee -a $PATCH_LOG 1>&2
        do_failure
      fi

      FILE_LIST="$FILE_LIST $file"
    done
  fi
}

binary_patch() {
  if [ -f ${APP_DIR}/$BSPATCH_NAME ]
  then
   echo "" >> $PATCH_LOG
   echo "----------------------------------" >> $PATCH_LOG
   echo "Binary Patching..." >> $PATCH_LOG
   echo "----------------------------------" >> $PATCH_LOG

    rm -f /var/webosinternals-*
    cp $BSPATCH_FILE /var/webosinternals-orig
    echo "$BSPATCH_EXEC /var/webosinternals-orig /var/webosinternals-patched ${APP_DIR}/$BSPATCH_NAME" | tee -a $PATCH_LOG
    $BSPATCH_EXEC /var/webosinternals-orig /var/webosinternals-patched ${APP_DIR}/$BSPATCH_NAME 2>&1 | tee -a $PATCH_LOG
    mkdir -p ${APP_DIR}/additional_files/`dirname $BSPATCH_FILE`
    mv /var/webosinternals-patched ${APP_DIR}/additional_files/$BSPATCH_FILE
    rm -f /var/webosinternals-*
  fi
}

verify_text_patch() {
  if [ -f ${APP_DIR}/$PATCH_NAME ]
  then
   echo "" >> $PATCH_LOG
   echo "----------------------------------" >> $PATCH_LOG
   echo "Dry run patch attempt..." >> $PATCH_LOG
   echo "----------------------------------" >> $PATCH_LOG

   $PATCH_EXEC -p1 -d / --dry-run < ${APP_DIR}/$PATCH_NAME 2>&1 >> $PATCH_LOG

   if [ $? -ne 0 ]
   then
     echo "" >> $PATCH_LOG
     echo "----------------------------------" >> $PATCH_LOG
     echo "dry run failed, checking if -R would succeed" >> $PATCH_LOG
     echo "----------------------------------" >> $PATCH_LOG
     $PATCH_EXEC -R -p1 -d / --dry-run < ${APP_DIR}/$PATCH_NAME 2>&1 >> $PATCH_LOG || failed_install
     patch_applied=yes
     echo "Interestingly, the patch seems to already be applied" | tee -a $PATCH_LOG
   fi
 fi
}

# MAIN
if [ ! -f $PATCH_LOG ]
then
  touch $PATCH_LOG
  echo "******* Patch Log Created by postinst $(date) ************" >> $PATCH_LOG
fi

remount_rw | tee -a $PATCH_LOG 1>&2

echo "" >> $PATCH_LOG
echo "------------------------------------------------------" >> $PATCH_LOG
echo "PATCH INSTALLATION $(date)" >> $PATCH_LOG
echo "------------------------------------------------------" >> $PATCH_LOG

if [ -f $APP_DIR/$PATCH_NAME ]
then
  echo "Contains text patch" >> $PATCH_LOG
  echo "  $APP_DIR/$PATCH_NAME" >> $PATCH_LOG
fi

if [ -f $APP_DIR/$TWEAKS_NAME ]
then
  echo "Contains tweaks file" >> $PATCH_LOG
  echo "  $APP_DIR/$TWEAKS_NAME" >> $PATCH_LOG
fi

if [ -f $APP_DIR/$BSPATCH_NAME ]
then
  echo "Contains binary patch" >> $PATCH_LOG
  echo "  $APP_DIR/$BSPATCH_NAME" >> $PATCH_LOG
  echo "  $BSPATCH_FILE" >> $PATCH_LOG
fi

if [ -d $APP_DIR/additional_files ]
then
  echo "Contains additional files" >> $PATCH_LOG
fi

if [ "$IPKG_OFFLINE_ROOT" = "" ]
then
  IPKG_OFFLINE_ROOT=/media/cryptofs/apps
fi

if [ "$APP_DIR" = "" ]
then
  echo "ERROR: APP_DIR must be set in postinst" | tee -a $PATCH_LOG 1>&2
  do_failure
fi

if [ ! -d $APP_DIR ]
then
  echo "ERROR: $APP_DIR is not a directory or does not exist!" | tee -a $PATCH_LOG 1>&2
  do_failure
fi

if [ ! -f $APP_DIR/$PATCH_NAME ] && [ ! -f $APP_DIR/$BSPATCH_NAME ] && [ ! -d ${APP_DIR}/additional_files ]
then
  echo "ERROR: Cannot find patch file, bspatch file or additonal_files!" | tee -a $PATCH_LOG 1>&2
  do_failure
fi

if [ ! -x $PATCH_EXEC ]
then
  echo "ERROR: Cannot find $PATCH_EXEC" | tee -a $PATCH_LOG 1>&2
  do_failure
  do_failure
fi

if [ ! -x $LSDIFF ]
then
  echo "ERROR: Cannot find $LSDIFF" | tee -a $PATCH_LOG 1>&2
  do_failure
fi

if [ ! -x $BSPATCH_EXEC ]
then
  echo "ERROR: Cannot find $BSPATCH_EXEC" | tee -a $PATCH_LOG 1>&2
  do_failure
fi

if [ ! -d $PATCH_CONTROL_DIR ]
then
  rm -rf $PATCH_CONTROL_DIR
  mkdir -p $PATCH_CONTROL_DIR || do_failure
fi

if [ -f $PATCH_CONTROL_DIR/backups ]
then
  touch $PATCH_CONTROL_DIR/file_list
  rm -f $PATCH_CONTROL_DIR/translated_backups
  cat $PATCH_CONTROL_DIR/backups | tr '\0' ' ' > $PATCH_CONTROL_DIR/translated_backups
  while read inp
  do
    patch_technology=`echo $inp | awk '{print $(NF)}' |grep aupt`
    if [ "$patch_technology" = "" ]
    then
      file=`echo $inp | awk '{print $(NF)}'`
    else
      file=`echo $inp | awk '{print $(NF-1)}'`
    fi

    if [ -f $file ]
    then
      echo "$file $patch_technology" >> $PATCH_CONTROL_DIR/file_list
    fi
  done < $PATCH_CONTROL_DIR/translated_backups

  rm -f $PATCH_CONTROL_DIR/translated_backups
  rm -f $PATCH_CONTROL_DIR/backups
fi

if [ ! -f $PATCH_CONTROL_DIR/file_list ]
then
  touch $PATCH_CONTROL_DIR/file_list || do_failure
fi

if [ -f $PATCH_CONTROL_DIR/packages ]
then
  touch $PATCH_PACKAGES_LIST
  cat $PATCH_CONTROL_DIR/packages >> $PATCH_PACKAGES_LIST
  rm -f $PATCH_CONTROL_DIR/packages
fi

if [ ! -f $PATCH_PACKAGES_LIST ]
then
  touch $PATCH_PACKAGES_LIST || do_failure
fi

verify_text_patch
binary_patch
verify_additional_files

echo "" >> $PATCH_LOG
echo "----------------------------------" >> $PATCH_LOG
echo "Creating md5sums list..." >> $PATCH_LOG
echo "----------------------------------" >> $PATCH_LOG
rm -f $APP_DIR/md5sums
touch $APP_DIR/md5sums

for i in $FILE_LIST
do
  file=/$i

  if [ -f $file ]
  then
    get_palm_md5sum
  fi

  if [ ! -f $file.webosinternals.orig ]
  then
    if [ ! -f $file ]
    then
      echo "Created file, generate empty backup $file.webosinternals.orig" >> $PATCH_LOG
      mkdir -p `dirname $file`
      touch $file.webosinternals.orig
    else
      cp $file $file.webosinternals.orig
      echo "Backup file $file" >> $PATCH_LOG
      echo "  `md5sum $file.webosinternals.orig`" >> $PATCH_LOG
    fi
    created_backup="yes"
  elif [ -f $file ]
  then
    file_md5sum=`md5sum $file | awk '{print $1}'`

    if [ "$file_md5sum" = "$palm_md5sum" ]
    then
      rm -f $file.webosinternals.orig
      cp $file $file.webosinternals.orig
      created_backup="yes"
    fi
  fi

  if [ "$created_backup" = "yes" ] || [ ! -s $file.webosinternals.orig ] || \
     [ "`md5sum $file.webosinternals.orig |awk '{print $1}'`" = "$palm_md5sum" ]
  then
    tmpvar=`echo $file | tr '/' '.'`
    sed -i -e /$tmpvar/d $PATCH_CONTROL_DIR/file_list
    echo "$file $VERSION" >> $PATCH_CONTROL_DIR/file_list
  fi
done

sed -i -e /`basename $APP_DIR`/d $PATCH_PACKAGES_LIST
basename "$APP_DIR $VERSION">> $PATCH_PACKAGES_LIST

install_additional_files
install_tweaks
install_patch

echo "SUCCESS" | tee -a $PATCH_LOG

exit 0
